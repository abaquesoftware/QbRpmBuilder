#!/usr/bin/env bash

# ======================================================================
# Copyright 2020 Arnaud BAQUE (abaque@abaquesoftware.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ======================================================================

#
# Warning: this code is a little bit tricky because it has to solve several problems:
#
# - - - - - - -
# Problem #1: DEB and RPM packages do not use the same order to launch scriptlets:
# - - - - - - -
# Example of update with DEB:
# . old-prerm     'upgrade'   <new-version>
# . new-preinst   'upgrade'   <old-version>
# . old-postrm    'upgrade'   <new-version>
# . new-postinst  'configure' <old-version>
#
# Example of update with RPM:
# . new-pretrans    0
# . new-pre         2
# . new-post        2
# . old-preun       1
# . old-postun      1
# . new-posttrans   0
#
# Note-1: pretrans and posttrans are called on 'install'/'upgrade' but not on 'remove'
# 
# To solve this problem, on upgrade:
# . new-pretrans    -> preprocess
# . new-pre         -> call old-prerm, then new-preinst
# . new-post        -> do nothing (in 'upgrade' case)
# . old-preun       -> do nothing (in 'upgrade' case)
# . old-postun      -> call old-postrm, then new-postinst
# . new-posttrans   -> do nothing
#
# - - - - - - -
# Problem #2: (involved by solution to Pb #1): how to call old scripts from new scripts
# - - - - - - -
# The solution found is:
# - 'pretrans' contains the code that can copy the DEB scriptlets (pre,post,...) in 
#    'cacheDir/new-...' or 'cacheDir/old-'
# - when 'pretrans' is called, it stores DEB scriplets in 'cacheDir/new-...'
# - when a new script needs an old script, it retrives the old version of 'pretrans'
#   with the command 'rpm -q --scripts <package-name>' and execute it with 
#   the QBRB_CACHE_PREFIX='old'
#
# - - - - - - -
# Problem #3: support upgrade from a package not generated by QbRpmBuilder
# - - - - - - -
# (upgrade   [not-QbRpmBuilder package] -> [QbRpmBuilder package] )
# ????
# 
# - - - - - - -
# Problem #4: support upgrade to a package not generated by QbRpmBuilder
# - - - - - - -
# (upgrade   [QbRpmBuilder package] -> [not-QbRpmBuilder package] )
# ????
#  
# - - - - - - -
# Problem #5: Some directories are not removed after 'rpm -e'
# - - - - - - -
# Solution found:
# 
# On removal, all these directories are deleted if there are empty and not used by another package
# Note: the dirCache is not essential. If it is detroyed, the directories won't be removed,
#       but the scripts will be launched as usual. This directory is mainly designed for debug purposes
#
# - - - - - - -
# Problem #6: '%' char must be removed from RPM scriptlets
# - - - - - - -
# -> use of a variable (_qbrb_percent=$'\x25')
# (cf. Qbrbtools_file_copy)
#
# - - - - - - -
# Problem #7: in some cases (no tty or cloud-init), a scriplet cannot execute directly a bash file
# - - - - - - -
# In some cases, the interactivity is broken (terminal issue)
# -> use of MYTTY = current TTY
# (cf. Qbrbtools_file_call)
#

# --------------------------------------------
function show_help() {
# --------------------------------------------
  echo "Syntax: $0 [-h|--help]"
}

# --------------------------------------------
function qbrb_dhGencontrol_initialize_variables() {
# --------------------------------------------
  # Value variables qbrbtools_...
  Qbrbtools_set_vars_from_files

  qbrb_packageDir="${PWD}/${qbrbtools_distribDir}/${qbrbtools_packageName}"
  qbrb_specFile="${qbrb_packageDir}/SPECS/package.specs"

  qbrb_script_new_preinst="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-preinst"
  qbrb_script_new_postinst="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-postinst"
  qbrb_script_new_prerm="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-prerm"
  qbrb_script_new_postrm="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-postrm"
  qbrb_file_new_version="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-version"
  qbrb_file_new_mode="${qbrbtools_cacheDir}/${qbrbtools_packageName}.new-mode"

  qbrb_script_old_preinst="${qbrbtools_cacheDir}/${qbrbtools_packageName}.old-preinst"
  qbrb_script_old_postinst="${qbrbtools_cacheDir}/${qbrbtools_packageName}.old-postinst"
  qbrb_script_old_prerm="${qbrbtools_cacheDir}/${qbrbtools_packageName}.old-prerm"
  qbrb_script_old_postrm="${qbrbtools_cacheDir}/${qbrbtools_packageName}.old-postrm"
  qbrb_file_old_version="${qbrbtools_cacheDir}/${qbrbtools_packageName}.old-version"
}

# --------------------------------------------
function qbrb_dhGencontrol_write_header() {
# --------------------------------------------
  # -- Build SPECS file
  rm -f "${qbrb_specFile}"
  [ -n "${qbrbtools_name}"          ] && echo "Name: ${qbrbtools_name}"              >> "${qbrb_specFile}"
  [ -n "${qbrbtools_version}"       ] && echo "Version: ${qbrbtools_version}"        >> "${qbrb_specFile}"
  [ -n "${qbrbtools_release}"       ] && echo "Release: ${qbrbtools_release}"        >> "${qbrb_specFile}"
  [ -n "${qbrbtools_architecture}"  ] && echo "BuildArch: ${qbrbtools_architecture}" >> "${qbrb_specFile}"
  [ -n "${qbrbtools_summary}"       ] && echo "Summary: ${qbrbtools_summary}"        >> "${qbrb_specFile}"
  [ -n "${qbrbtools_group}"         ] && echo "Group: ${qbrbtools_group}"            >> "${qbrb_specFile}"
  [ -n "${qbrbtools_license}"       ] && echo "License: ${qbrbtools_license}"        >> "${qbrb_specFile}"
  [ -n "${qbrbtools_copyright}"     ] && echo "Copyright: ${qbrbtools_copyright}"    >> "${qbrb_specFile}"
  [ -n "${qbrbtools_vendor}"        ] && echo "Vendor: ${qbrbtools_vendor}"          >> "${qbrb_specFile}"
  [ -n "${qbrbtools_url}"           ] && echo "URL: ${qbrbtools_url}"                >> "${qbrb_specFile}"
  [ -n "${qbrbtools_source0}"       ] && echo "Source0: ${qbrbtools_source0}"        >> "${qbrb_specFile}"
  [ -n "${qbrbtools_noSource}"      ] && echo "NoSource: ${qbrbtools_noSource}"      >> "${qbrb_specFile}"
  [ -n "${qbrbtools_buildRoot}"     ] && echo "BuildRoot: ${qbrbtools_buildRoot}"    >> "${qbrb_specFile}"
  [ -n "${qbrbtools_buildRequires}" ] && echo "BuildRequires: ${qbrbtools_buildRequires}"  >> "${qbrb_specFile}"
  [ -n "${qbrbtools_requires}"      ] && echo "Requires: ${qbrbtools_requires}"      >> "${qbrb_specFile}"
  [ -n "${qbrbtools_provides}"      ] && echo "Provides: ${qbrbtools_provides}"      >> "${qbrb_specFile}"
  [ -n "${qbrbtools_conflicts}"     ] && echo "Conflicts: ${qbrbtools_conflicts}"    >> "${qbrb_specFile}"
  
  # description
  echo "" >> "${qbrb_specFile}"
  echo "%description" >> "${qbrb_specFile}"
  [ -n "${qbrbtools_summary}"     ] && echo "${qbrbtools_summary}" >> "${qbrb_specFile}"
  [ -n "${qbrbtools_maintainer}"  ] && echo "Maintainer: ${qbrbtools_maintainer}" >> "${qbrb_specFile}"
  echo "" >> "${qbrb_specFile}"
}

# --------------------------------------------
function qbrb_dhGencontrol_write_prep_clean_install() {
# --------------------------------------------
cat <<EOF >> "${qbrb_specFile}"
%prep
# echo buildroot = %{qbrb_buildRoot}
# echo "%setup -q"

%clean


%install
mkdir -p "%{buildroot}"
cp -Rf "%{buildroot}/../../BUILD/%{name}-%{version}/"* "%{buildroot}/"


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_files_doc_changelog() {
# --------------------------------------------
  # - - - - - - - - - - - -
  # files
  # - - - - - - - - - - - -
  cat <<EOF >> "${qbrb_specFile}"
%files
%defattr(-,root,root,-)
EOF
  #
  local rootDir="${qbrb_packageDir}/BUILD/${qbrbtools_packageName}-${qbrbtools_packageVersion}"
  local OLD_PWD="${PWD}"
  cd "${rootDir}"
  for qbrb_file in $( find . )
  do
    if [ ! -d "${qbrb_file}" ] ; then
      local qbrb_file="$( echo "${qbrb_file}" | sed 's/^\.//g' )"
      echo "${qbrb_file}" >> "${qbrb_specFile}"
    fi
  done
  cd "${OLD_PWD}"
  # doc / changelog
  cat <<EOF >> "${qbrb_specFile}"


#%doc
%changelog


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_pretrans() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%pretrans
${qbrbtools_tagLine}
# echo "- Debug - PRE-TRANS - ${qbrbtools_packageFullName} - QBRB_CACHE_PREFIX = \${QBRB_CACHE_PREFIX}"
mkdir -p "${qbrbtools_cacheDir}"
[ -z "\${QBRB_CACHE_PREFIX}" ] && QBRB_CACHE_PREFIX="new"
echo "${qbrbtools_packageFullVersion}" > "${qbrbtools_cacheDir}/${qbrbtools_packageName}.\${QBRB_CACHE_PREFIX}-version"
EOF
  Qbrbtools_file_copy "${qbrbtools_packageName}" "preinst"  "${qbrbtools_cacheDir}/${qbrbtools_packageName}.\${QBRB_CACHE_PREFIX}-preinst"   >> "${qbrb_specFile}"
  Qbrbtools_file_copy "${qbrbtools_packageName}" "postinst" "${qbrbtools_cacheDir}/${qbrbtools_packageName}.\${QBRB_CACHE_PREFIX}-postinst"  >> "${qbrb_specFile}"
  Qbrbtools_file_copy "${qbrbtools_packageName}" "prerm"    "${qbrbtools_cacheDir}/${qbrbtools_packageName}.\${QBRB_CACHE_PREFIX}-prerm"     >> "${qbrb_specFile}"
  Qbrbtools_file_copy "${qbrbtools_packageName}" "postrm"   "${qbrbtools_cacheDir}/${qbrbtools_packageName}.\${QBRB_CACHE_PREFIX}-postrm"    >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"
exit 0


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_posttrans() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%posttrans
# echo "- Debug - POST-TRANS - ${qbrbtools_packageFullName}"
# clean-up
rm -f "${qbrbtools_cacheDir}/${packageName}.old-"*
rm -f "${qbrbtools_cacheDir}/${packageName}.new-"*
PARAM1="2" # upgrade
[ -f "${qbrb_file_new_mode}" ] && PARAM1="\$( cat "${qbrb_file_new_mode}" )"
if [ \${PARAM1} -eq 1 ] ; then
  # install
EOF
  Qbrbtools_file_call "${qbrb_script_new_postinst}" "configure" "" "" >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"
else
  PARAM2=""
  [ -e "${qbrb_file_old_version}" ] && PARAM2="\$( cat "${qbrb_file_old_version}" )"
EOF
  Qbrbtools_file_call "${qbrb_script_new_postinst}" "configure" "\${PARAM2}" >> "${qbrb_specFile}"
  echo "fi" >> "${qbrb_specFile}"
  # update cache file names + clean-up
  Qbrbtools_post "${qbrbtools_packageName}" "${qbrbtools_packageFullVersion}" >> "${qbrb_specFile}"
  # Footer
  cat <<EOF >> "${qbrb_specFile}"
exit 0


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_pre() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%pre
# echo "- Debug - PRE - ${qbrbtools_packageFullName} - PARAM-1 = \$1 - PARAM-2 = \$2"
if [ \$1 -eq 1 ]; then
EOF
  # - - - - - - - -
  # case 1: install
  # - - - - - - - -
  Qbrbtools_file_call "${qbrb_script_new_preinst}" "install" "" "" >> "${qbrb_specFile}"
  echo "else" >> "${qbrb_specFile}"
  # - - - - - - - -
  # case 2: upgrade
  # - - - - - - - -
  tmpFile="$( Qbrbtools_get_temp_filename )"
  Qbrbtools_function_readPackageScriptlet >> "${qbrb_specFile}"
  Qbrbtools_store_scriptlet "${qbrbtools_packageName}" "pretrans" "${tmpFile}"  >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"

_qbrb_percent=\$'\x25'
rpm -q --queryformat "\${_qbrb_percent}{VERSION}-\${_qbrb_percent}{RELEASE}" "${qbrbtools_packageName}" > "${qbrb_file_old_version}"

OLD_PKG_GENERATED_BY_QBRB=\$( grep -c "${qbrbtools_tagLine}" "${tmpFile}" )
if [ \${OLD_PKG_GENERATED_BY_QBRB} -ne 0 ] ; then
EOF
  # the previous package version was generated by QbRpmBuilder
  Qbrbtools_file_call "${tmpFile}" "" "" "QBRB_CACHE_PREFIX='old'" >> "${qbrb_specFile}"
  Qbrbtools_file_call "${qbrb_script_old_prerm}" "upgrade" "${qbrbtools_packageFullVersion}" "" >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"
fi
rm -f "${tmpFile}"

PARAM2=""
[ -e "${qbrb_file_old_version}" ] && PARAM2="\$( cat "${qbrb_file_old_version}" )"
EOF
  Qbrbtools_file_call "${qbrb_script_new_preinst}" "upgrade" "\${PARAM2}" "" >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"
fi

# --------------------------------------
# Create directories
# --------------------------------------
EOF
  qbrb_dirsConfigFile=$( Qbrbtools_get_config_file "${qbrbtools_packageName}" "dirs")
  if [ -n "${qbrb_dirsConfigFile}" ] ; then
    while read line
    do
      dirList=$( echo "${line}" | sed "s/[ |\\t]\+/ /g" | sed "s/^ //g" | sed "s/ $//g" )
      if [ -n "${dirList}" ] ; then
        for curDir in ${dirList}
        do
          echo "mkdir -p \"/${curDir}\" " >> "${qbrb_specFile}"
        done
      fi
    done < "${qbrb_dirsConfigFile}"
  fi
  # Footer
  cat <<EOF >> "${qbrb_specFile}"
exit 0


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_post() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%post
# echo "- Debug - POST - ${qbrbtools_packageFullName} - PARAM-1 = \$1 - PARAM-2 = \$2"
echo "\$1" > "${qbrb_file_new_mode}"
exit 0


EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_preun() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%preun
# echo "- Debug - PREUN - ${qbrbtools_packageFullName} - PARAM-1 = \$1 - PARAM-2 = \$2"
mkdir -p "${qbrbtools_cacheDir}"
# Store package file list
dirListFile="/tmp/$( date '+%s.%N' )-$( printf '%05d' $RANDOM )-$( printf '%05d' $RANDOM )-removedirs.tmp"
rpm -ql "${qbrbtools_packageName}" > "\${dirListFile}"

if [ \$1 -eq 0 ] ; then
  # clean-up
  rm -f "${qbrbtools_cacheDir}/${packageName}.old-"*
  rm -f "${qbrbtools_cacheDir}/${packageName}.new-"*
fi

  # retrieve old-scripts
EOF
  tmpFile="$( Qbrbtools_get_temp_filename )"
  Qbrbtools_function_readPackageScriptlet >> "${qbrb_specFile}"
  Qbrbtools_store_scriptlet "${qbrbtools_packageName}" "pretrans" "${tmpFile}"  >> "${qbrb_specFile}"
  Qbrbtools_file_call "${tmpFile}" "" "" "QBRB_CACHE_PREFIX='old'" >> "${qbrb_specFile}"
  cat <<EOF >> "${qbrb_specFile}"
rm -f "${tmpFile}"

if [ \$1 -eq 0 ]; then
EOF
  # - - - - - - - -
  # case 1: remove
  # - - - - - - - -
  Qbrbtools_file_call "${qbrb_script_old_prerm}" "remove" "" "" >> "${qbrb_specFile}"
  echo "else" >> "${qbrb_specFile}"
  # - - - - - - - -
  # case 2: upgrade
  # - - - - - - - -
  cat <<EOF >> "${qbrb_specFile}"

if [ ! -e "${qbrb_file_new_version}" ] ; then
  PARAM1="upgrade-to-non-qbrpmbuilder-package"
  qbrb_percent=\$'\x25'
  PARAM2="\$( rpm -q --queryformat "\${_qbrb_percent}{VERSION}-\${_qbrb_percent}{RELEASE}" "${qbrbtools_packageName}" )"
  PARAM2="\$( echo "\${PARAM2}" | sed "s/${qbrbtools_packageFullVersion}//" )"
EOF
  Qbrbtools_file_call "${qbrb_script_old_prerm}" "\${PARAM1}" "\${PARAM2}" "" >> "${qbrb_specFile}"
  # Footer
  cat <<EOF >> "${qbrb_specFile}"
  fi
fi
exit 0

EOF
}

# --------------------------------------------
function qbrb_dhGencontrol_write_postun() {
# --------------------------------------------
  cat <<EOF >> "${qbrb_specFile}"
%postun
# echo "- Debug - POSTUN - ${qbrbtools_packageFullName} - PARAM-1 = \$1 - PARAM-2 = \$2"

# -------------------------------------
# remove directories
# -------------------------------------
tmpFile="/tmp/$( date '+%s.%N' )-$( printf '%05d' $RANDOM )-$( printf '%05d' $RANDOM ).tmp"
fileList="\$( rpm -ql "${qbrbtools_packageName}"  )"
rm -f "\${tmpFile}"
touch "\${tmpFile}"
for file in \${fileList}
do
  curFile="\${file}"
  while [ "\${curFile}" != "/" ]
  do
    echo "\${curFile}" >> "\${tmpFile}"
    curFile="\$( dirname "\${curFile}" )"
  done
done
sort -r -u "\${tmpFile}" > "\${tmpFile}.sorted"
for file in \$( cat "\${tmpFile}.sorted" )
do
  if [ -d "\${file}" ] ; then
    IS_OWNED=\$( rpm -qf "\${file}" | grep -vc "is not owned" )
    [ \${IS_OWNED} -eq 0 ] && rmdir --ignore-fail-on-non-empty "\${file}"
  fi
done
rm -f "${tmpFile}"
rm -f "${tmpFile}.sorted"
set +x
# -------------------------------------

if [ \$1 -eq 0 ]; then
EOF
  # - - - - - - - -
  # case 1: remove
  # - - - - - - - -
  Qbrbtools_file_call "${qbrb_script_old_postrm}" "remove" "" "" >> "${qbrb_specFile}"
  echo "else" >> "${qbrb_specFile}"
  # - - - - - - - -
  # case 2: upgrade
  # - - - - - - - -
  cat <<EOF >> "${qbrb_specFile}"
if [ -e "${qbrb_file_new_version}" ] ; then
  PARAM1="upgrade"
  PARAM2="\$(cat "${qbrb_file_new_version}")"
else
  PARAM1="upgrade-to-non-qbrpmbuilder-package"
  _qbrb_percent=\$'\x25'
  PARAM2="\$( rpm -q --queryformat "\${_qbrb_percent}{VERSION}-\${_qbrb_percent}{RELEASE}" "${qbrbtools_packageName}" )"
  PARAM2="\$( echo "\${PARAM2}" | sed "s/${qbrbtools_packageFullVersion}//" )"
fi
EOF
  Qbrbtools_file_call "${qbrb_script_old_postrm}" "\${PARAM1}" "\${PARAM2}" "" >> "${qbrb_specFile}"
  # Footer
  cat <<EOF >> "${qbrb_specFile}"
fi

exit 0

EOF
}

# ============================================
# MAIN
# ============================================

qbrb_rootDir="/opt/abaque/QbRpmBuilder/bin"
[ -e "opt_abaque_QbRpmBuilder" ] && qbrb_rootDir="opt_abaque_QbRpmBuilder/bin"
source "${qbrb_rootDir}/qbrb_tools.inc.sh"

# -- read input parameters
if [ -n "$1" ] ; then
  if [ "$1" == "-h" -o "${PARAM}" == "--help" ] ; then
    show_help
    exit 0
  else
    echo "ERROR: $0 - Unknown option : ${1}"
    echo ""
    show_help
    exit 1
  fi
fi

qbrb_dhGencontrol_initialize_variables

mkdir -p "${qbrb_packageDir}"
mkdir -p "${qbrbtools_packageDir}/SPECS"

qbrb_dhGencontrol_write_header
qbrb_dhGencontrol_write_prep_clean_install
qbrb_dhGencontrol_write_files_doc_changelog
qbrb_dhGencontrol_write_pretrans
qbrb_dhGencontrol_write_posttrans
qbrb_dhGencontrol_write_pre
qbrb_dhGencontrol_write_post
qbrb_dhGencontrol_write_preun
qbrb_dhGencontrol_write_postun

# Debug
#echo "XXXXXXXXXXXXX ${qbrb_specFile} XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
# cp "${qbrb_specFile}" "/tmp/rpm-spec.rpm"
#echo "XXXXXXXXXXXXX ${qbrb_specFile} XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

exit 0
